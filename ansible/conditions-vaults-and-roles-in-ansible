############# CONDITIONS #############
---> whenever we have different scenarios, we put conditions according to the scenario

when statement

sometimes you want to skip a particular command on a particular node

now go to ansible server create a playbook with name conditions.yml

[ansible@ip]# vi conditions.yml

--- # conditions playbook
- hosts: all
  user: ansible
  become: yes
  connection: ssh
  gather_facts: yes
  tasks:
     - name: install apache on debian
       command: apt-get -y install apache2
       when: ansible_os_family == "Debian"
     - name: install apache for redhat
       command: yum -y insatll httpd
       when: ansible_od_family == "RedHat"

esc ---> :wq!

now execute playbook

[ansible@ip]# ansible-playbook conditions.yml


############## VAULT ###############

---> Ansible allows keeping sensitive data such as passwords or keys in encrypted files, rather than a plaintext in your playbooks 

---> Creating a new encrypted playbook 

[ansible@ip]$ ansible-vault create vault.yml

---> Edit the encrypted playbook 

[ansible@ip]# ansible-vault edit vault.yml

---> To change the password

[ansible@ip]# ansible-vault rekey vault.yml

---> To encrypt an existing playbook 

[ansible@ip]# ansible-vault encrypt target.yml

---> To decrypt an encrypted playbook

[ansible@ip]# ansible-vault decrypt target.yml

############# ROLES ###########

---> we can use two techniques for reusing a set of tasks: - includes and roles 

---> roles are good for organaising tasks and encapsulating data needed to accomplish those tasks
---> we can organaise playbook into a directory stucture called roles
---> adding more and more functionality to the playbook will make it difficult to maintain in a single file

===> Default:###--> It stores the data about role/application default variables eg--> if you want to run to port 80 or 8080 then variables needs to define in this path 

===> Files:###--> It contains files need to be transfered to the remote VM ( static files )

===> Handlers:###--> They are triggers or task we can segregate all the handlers required in playbook 

===> Meta:###--> This directory contain files that establish roles dependencies eg--> another name, supported platform, dependencies if any

===>Tasks:###--> It contains all the tasks that is normally in the playbook eg--> installing packages and copies files etc... 

===> Vars:###--> variables for the role can be specified in this directory and used in your configuration files both vars and default stores variables
--->
--->
