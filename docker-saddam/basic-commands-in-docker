######### BASIC COOMANDS IN DOCKER #########

---> To see all images present in your local machine
[]# docker images

---> To findout images in dockerhub
[]# docker search jenkins

---> To download image from dockerhub to local machine
[]# docker pull jenkins

---> To give name to container
[]# docker run -it --name bhupinder ubuntu/bin/bash

i=interactive mode t=terminal

---> To start docker service
[]# service docker start

---> To check service is start or not
[]# service docker status
[]# docker info

---> To start container
[]# docker start bhupinder

---> To go inside the container
[]# docker attach bhupinder

---> To see all containers
[]# docker ps -a

---> To see only runnig containers
[]# docker ps

---> To stop container
[]# docker stop bhupinder

---> To delete container
[]# docker rm bhupinder

########## DOCKER FILE COMPONENTS OF DIFF COMMAND ###########

---> login to aws account and start your ec2 instance access it from putty or mobaxterm or git bash
---> now we have to create container fro,our own image
therefore, create one container first
--->docker run -it --name saddam ubuntu /bin/bash
--->cd /tmp
--->now create the file inside this tmp directory
---> touch myfile
--->now if you want to see the difference between the base image & changes on it then
--->docker diff saddam updateimage
o/p--> C /root
       A /root/.bash_history
       C /tmp
       A /tmp/myfile
[A=append or addition
 C=change
 D=deletion]
--->now create image of this container
--->docker commit newcontainer updateimage
container name=newcontainer
name of image=updateimage
--->docker images
now create container from this image
--->docker run -it --name sameer updateimage /bin/bash
[root@cid]# ls
[root@cid]# cd /tmp
[root@cid]# ls
o/p-->myfile {you will get all files back}

######## Dockerfile ########
---> Docker file is basically a test file it contains same set of instruction
---> automation of Docker image creation
######## DOCKER COMPONENTS #########
###### FROM
---> for the image this command must be top of the Dockerfile
###### RUN
---> To execute command's it will create a layer in image
###### MAINTAINER
---> author/owner/description
###### COPY
---> copy files fron local system (docker VM) we need to provide source, destination...
(we can't download file from internet and remote repo)
###### ADD
---> simmilar to copy but, it provides a feature to download files from internet, also we extract file at Docker image side..
###### EXPOSE
---> To execute port's such as port 8080 for tomcat, for port 80 for nginx
###### WORKDIR
---> to set working directory for a container
###### CMD
---> execute commands but during container creation
###### ENTRYPOINT
---> simmilar to cmd, but has higher priority over CMD, first commands will be executed. by ENTRYPOINT only....
###### ENV
---> Environment Variables
###### ARG
--->

###### PRACTICAL DEMO ON DOCKERFILE

---> create a file named dockerfile
---> add instructions in Dockerfile
---> build Dockerfile to create image
---> RUN image to create image

vi DOCKERFILE

FROM ubuntu: xyz
RUN echo "any content" >/tmp/testfile

to create image out of DOCKERFILE
docker build -t myimage
docker ps -a
docker images

---> now create the container from the above image
docker run -it --name containername imagename /bin/bash
cat /tmp/testfile

---> vi DOCKERFILE

FROM mysql: 5.7
WORKDIR /tmp
RUN echo "messege" > /tmp/testfile
COPY testfile/tmp
ADD test.tar.gz /tmp

###### DOCKER VOLUME & HOW TO SHARE IT

---> Volume is a simple directory inside 0ur container
---> firstly we have to declare this directory as a volume and then share volume..
---> even if we stop container, stil l we can access volume..
---> volume will be created in one container..
---> you can declare a directory as a volume only while creating container..
---> you can't create volume from existing container
---> you can share one volume accross any number of containers..
---> volume will not be included when you update an image...
## you can mapped volume in two types

1).container <-----> container
2).host <-----> container

####### BENIFITS OF VOLUME

---> decoupling container from storage
---> share volume among different containers
---> attach volume to containers
---> on deleting container volume does not delete


###### CONTAINER <---> CONTAINER ######
###### PRACTICAL DEMO ON CREATING VOLUME DOCKERFILE
---> Create a dockerfile and write
FROM ubuntu
VOLUME ["/myvolume1"]
then create image from this Dockerfile
---> docker build -t myimage
now create a container from the image&RUN
docker run -it --name container1 myimage /bin/bash
now do ls you can see myvolume1
now share volume with another container
container<-->container
docker run -it --nmae container2 --privilieged=true --volumesfrom container1 /bin/bash
now after creating container2 myvolume1 is visible whatever you do in one volume, can see from another volume
touch /myvolume1/samplefile
docker start container1
docker attach container1
ls
cd myvolume1
you can see sample file here

###### CONTAINER <---> CONTAINER ######
###### PRACTICAL DEMO ON CREATING VOLUME FROM COMMANDS
now try to create volume by using commands
docker run -it --name containername -v /volume2 ubuntu /bin/bash
do--> ls
--> cd /volume2
now create one file cont3file and exit
now create one more container and share volume2
docker run -it --name containername --privileged=true --volumes-from containername ubuntu /bin/bash
now you are inside container, do ls, you can see volume2
now create one file inside this volume and then check in containername you can see that

###### HOST <----> CONTAINER
volumes (host-container)
verify files in /home/ec2-user
docker run -it --name hostcont -v /home/ec2-user: /rajput --privileged=true ubuntu /bin/bash
cd rajput
do---> ls you can see all files of host machine
---> touch rajputfile (in container)
exit
now check in EC2 machine you can see this file

###### SOME OTHER COMMANDS
docker volume ls
docker volume create <volumename>
docker volume rm <volumename>
docker volume prune    {it removed all unused docker volumes}
docker volume inspect <volumename>
docker container inspect <containername>
