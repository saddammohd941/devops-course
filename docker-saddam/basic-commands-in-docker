######### BASIC COOMANDS IN DOCKER #########

---> To see all images present in your local machine
[]# docker images

---> To findout images in dockerhub
[]# docker search jenkins

---> To download image from dockerhub to local machine
[]# docker pull jenkins

---> To give name to container
[]# docker run -it --name bhupinder ubuntu/bin/bash

i=interactive mode t=terminal

---> To start docker service
[]# service docker start

---> To check service is start or not
[]# service docker status
[]# docker info

---> To start container
[]# docker start bhupinder

---> To go inside the container
[]# docker attach bhupinder

---> To see all containers
[]# docker ps -a

---> To see only runnig containers
[]# docker ps

---> To stop container
[]# docker stop bhupinder

---> To delete container
[]# docker rm bhupinder



###### DOCKER VOLUME & HOW TO SHARE IT

---> Volume is a simple directory inside 0ur container
---> firstly we have to declare this directory as a volume and then share volume..
---> even if we stop container, stil l we can access volume..
---> volume will be created in one container..
---> you can declare a directory as a volume only while creating container..
---> you can't create volume from existing container
---> you can share one volume accross any number of containers..
---> volume will not be included when you update an image...
## you can mapped volume in two types

1).container <-----> container
2).host <-----> container

####### BENIFITS OF VOLUME

---> decoupling container from storage
---> share volume among different containers
---> attach volume to containers
---> on deleting container volume does not delete


###### CONTAINER <---> CONTAINER ######
###### PRACTICAL DEMO ON CREATING VOLUME DOCKERFILE
---> Create a dockerfile and write
FROM ubuntu
VOLUME ["/myvolume1"]
then create image from this Dockerfile
---> docker build -t myimage
now create a container from the image&RUN
docker run -it --name container1 myimage /bin/bash
now do ls you can see myvolume1
now share volume with another container
container<-->container
docker run -it --nmae container2 --privilieged=true --volumesfrom container1 /bin/bash
now after creating container2 myvolume1 is visible whatever you do in one volume, can see from another volume
touch /myvolume1/samplefile
docker start container1
docker attach container1
ls
cd myvolume1
you can see sample file here

###### CONTAINER <---> CONTAINER ######
###### PRACTICAL DEMO ON CREATING VOLUME FROM COMMANDS
now try to create volume by using commands
docker run -it --name containername -v /volume2 ubuntu /bin/bash
do--> ls
--> cd /volume2
now create one file cont3file and exit
now create one more container and share volume2
docker run -it --name containername --privileged=true --volumes-from containername ubuntu /bin/bash
now you are inside container, do ls, you can see volume2
now create one file inside this volume and then check in containername you can see that

###### HOST <----> CONTAINER
volumes (host-container)
verify files in /home/ec2-user
docker run -it --name hostcont -v /home/ec2-user: /rajput --privileged=true ubuntu /bin/bash
cd rajput
do---> ls you can see all files of host machine
---> touch rajputfile (in container)
exit
now check in EC2 machine you can see this file

###### SOME OTHER COMMANDS
docker volume ls
docker volume create <volumename>
docker volume rm <volumename>
docker volume prune    {it removed all unused docker volumes}
docker volume inspect <volumename>
docker container inspect <containername>
