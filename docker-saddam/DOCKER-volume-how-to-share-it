###### DOCKER VOLUME & HOW TO SHARE IT

---> Volume is a simple directory inside 0ur container
---> firstly we have to declare this directory as a volume and then share volume..
---> even if we stop container, stil l we can access volume..
---> volume will be created in one container..
---> you can declare a directory as a volume only while creating container..
---> you can't create volume from existing container
---> you can share one volume accross any number of containers..
---> volume will not be included when you update an image...

###### you can mapped volume in two types

1).container <-----> container
2).host <-----> container

####### BENIFITS OF VOLUME

---> decoupling container from storage
---> share volume among different containers
---> attach volume to containers
---> on deleting container volume does not delete


###### CONTAINER <---> CONTAINER ######

###### PRACTICAL DEMO ON CREATING VOLUME DOCKERFILE

---> Create a dockerfile and write

[root@ip]# vi Dockerfile

FROM ubuntu
VOLUME ["/myvolume1"]

esc---> :wq!

---> then create image from this Dockerfile

[root@ip]# docker build -t myimage

---> now create a container from the image&RUN

[root@ip]# docker run -it --name container1 myimage /bin/bash

---> now do ls you can see myvolume1

now share volume with another container

####### container<-->container

[root@ip]# docker run -it --nmae container2 --privilieged=true --volumesfrom container1 /bin/bash

now after creating container2 myvolume1 is visible whatever you do in one volume, can see from another volume

[root@ip]# touch /myvolume1/samplefile

[root@ip]# docker start container1

[root@ip]# docker attach container1

[root@ip]# ls

[root@ip]# cd myvolume1

you can see sample file here

###### CONTAINER <---> CONTAINER ######

###### PRACTICAL DEMO ON CREATING VOLUME FROM COMMANDS

---> now try to create volume by using commands

[root@ip]# docker run -it --name containername -v /volume2 ubuntu /bin/bash

---> "here -v is for declaring as a volume"

do--> ls

--> cd /volume2

---> now create one file cont3file and exit

---> now create one more container and share volume2

[root@ip]# docker run -it --name containername --privileged=true --volumes-from containername ubuntu /bin/bash

now you are inside container, do ls, you can see volume2

now create one file inside this volume and then check in containername you can see that

###### HOST <----> CONTAINER

volumes (host-container)
verify files in /home/ec2-user

[root@ip]# docker run -it --name hostcont -v /home/ec2-user:/rajput --privileged=true ubuntu /bin/bash

[root@ip]# cd rajput

do---> ls you can see all files of host machine

[root@ip]# touch rajputfile (in container)

[root@ip]# exit

now check in EC2 machine you can see this file

###### SOME OTHER COMMANDS

[root@ip]# docker volume ls

[root@ip]# docker volume create <volumename>

[root@ip]# docker volume rm <volumename>

[root@ip]# docker volume prune    {it removed all unused docker volumes}

[root@ip]# docker volume inspect <volumename>

[root@ip]# docker container inspect <containername>
